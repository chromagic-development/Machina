// VectorDBServerOpenAI: Creates and initializes an in-memory vector database using named pipes for initialization and semantic search
// v1.0.1.1
// Argument 1: pageCount returned (default is 5)
// Embeddings are generated by OpenAI
// Copyright © 2025 Bruce Alexander
// This software is licensed under the MIT License. See LICENSE file for details.

using System.IO.Pipes;
using System.Runtime.InteropServices;
using OpenAI;
using Build5Nines.SharpVector.OpenAI;

namespace VectorDBServer
{
    class VectorDBServerOpenAI
    {
        static bool isInitialized = false;
        static BasicOpenAIMemoryVectorDatabase? vdb;

        static async Task Main(string[] args)
        {
            Console.WriteLine("Vector database server is running...");

            int pageCount = 5; // Default value
            if (args.Length > 0 && int.TryParse(args[0], out int parsedPageCount))
            {
                pageCount = parsedPageCount;
            }

            string? openAIKey = null;
            string? initText = null;
            var modelName = "text-embedding-3-small";

            PipeTransmissionMode mode = RuntimeInformation.IsOSPlatform(OSPlatform.Windows)
                ? PipeTransmissionMode.Message
                : PipeTransmissionMode.Byte;

            using var server = new NamedPipeServerStream("VectorPipe", PipeDirection.InOut, 1, mode);
            await server.WaitForConnectionAsync();
            using var reader = new StreamReader(server);
            using var writer = new StreamWriter(server) { AutoFlush = true };

            // First line: OpenAI API key
            openAIKey = await reader.ReadLineAsync();
            if (string.IsNullOrWhiteSpace(openAIKey))
            {
                await writer.WriteLineAsync("Missing OpenAI API key.");
                return;
            }

            // Create embedding client
            var openAIClient = new OpenAIClient(openAIKey);
            var embeddingClient = openAIClient.GetEmbeddingClient(modelName);
            vdb = new BasicOpenAIMemoryVectorDatabase(embeddingClient);

            // Second line: initialization text
            initText = await reader.ReadLineAsync();
            if (!string.IsNullOrWhiteSpace(initText))
            {
                InitializeDatabase(initText);
                isInitialized = true;
                await writer.WriteLineAsync("Vector database initialized.");
            }
            else
            {
                await writer.WriteLineAsync("Initialization text was empty.");
            }

            // Enter main loop
            while (true)
            {
                string? request = await reader.ReadLineAsync();
                if (string.IsNullOrEmpty(request)) continue;

                string response = SearchDatabase(request, pageCount);
                await writer.WriteLineAsync(response);
            }
        }

        static void InitializeDatabase(string input)
        {
            if (vdb == null) return;

            string[] parts = input.Split('.', StringSplitOptions.RemoveEmptyEntries);
            foreach (string part in parts)
            {
                string text = part.Trim();
                if (!string.IsNullOrEmpty(text))
                    vdb.AddText(text);
            }
        }

        static string SearchDatabase(string prompt, int pageCount)
        {
            if (vdb == null) return "Database not initialized.";

            var result = vdb.Search(prompt, pageCount: pageCount);
            if (result.IsEmpty) return "no results";
            return string.Join(" ", result.Texts.Select(t => t.Text.TrimEnd('.') + "."));
        }
    }
}
